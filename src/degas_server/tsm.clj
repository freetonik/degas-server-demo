(ns degas-server.tsm)

(defn pathify [vec]
  "Turns a vector into a vector of transitions,
   including last element back to the first
   ex: [0 1 2] -> [[0 1] [1 2] [2 0]]"
  (map (fn [i]
           (subvec (into vec vec) i (+ 2 i)))
       (range (count vec))))

(def distances
  [
   [ 0	77	64	52	124	113	181	32	107	121	161	34	97	26	49	87	88	28	212	45	92	56	111	107	68	41	214	184	139	9	34	150	12	130	18	112	79	90	135	79	149	72	17	56	56	44	32	76	145	83 ]
   [ 77	0	22	61	111	76	246	99	50	113	197	73	112	84	81	124	81	58	198	35	26	29	147	143	15	99	200	169	206	77	78	186	69	56	94	105	8	23	126	13	186	26	83	121	43	111	76	95	63	8 ]
   [ 64	22	0	68	143	104	236	87	78	140	204	59	119	70	88	131	107	44	231	21	53	16	154	150	10	86	233	202	192	64	85	193	56	83	80	131	22	32	154	22	193	33	70	112	30	97	63	103	87	34 ]
   [ 52	61	68	0	92	81	188	41	74	89	141	59	65	73	24	67	56	55	180	59	60	56	90	87	72	85	182	152	158	36	20	130	38	98	65	80	66	81	81	71	129	44	64	63	48	91	62	48	112	54 ]
   [ 124	111	143	92	0	40	254	127	59	68	180	140	84	150	109	115	38	136	90	133	95	130	150	126	129	166	91	60	241	116	106	169	119	84	143	49	121	122	14	120	168	117	141	149	122	169	143	91	100	110 ]
   [ 113	76	104	81	40	0	262	115	28	83	194	128	98	139	97	130	36	124	128	115	61	103	163	141	95	155	130	99	232	105	94	184	107	53	131	64	87	88	55	86	183	96	130	138	110	157	132	106	69	76 ]
   [ 181	246	236	188	254	262	0	154	254	194	148	202	173	201	174	144	237	199	335	216	241	227	105	124	239	174	336	263	64	174	174	137	185	278	181	211	249	264	253	254	115	227	192	129	227	164	206	185	291	238 ]
   [ 32	99	87	41	127	115	154	0	109	110	150	54	86	54	38	76	91	51	215	68	95	79	76	96	91	69	217	170	125	26	29	139	37	133	46	115	104	113	138	102	138	82	45	30	78	72	58	65	146	92 ]
   [ 107	50	78	74	59	28	254	109	0	98	206	121	114	132	90	133	50	112	147	88	35	77	156	153	69	148	149	119	225	97	87	196	100	24	124	78	61	62	75	60	195	70	123	131	85	150	125	105	40	50 ]
   [ 121	113	140	89	68	83	194	110	98	0	111	136	20	143	80	57	51	133	141	130	96	127	92	68	131	163	142	69	183	113	96	111	116	121	135	27	123	124	62	122	111	114	134	133	119	161	140	45	137	112 ]
   [ 161	197	204	141	180	194	148	150	206	111	0	182	98	182	119	75	161	179	240	194	191	191	74	62	206	197	241	161	162	154	135	9	165	228	174	137	200	215	179	205	32	178	173	135	183	200	186	105	242	189 ]
   [ 34	73	59	59	140	128	202	54	121	136	182	0	115	22	69	108	103	16	227	40	101	51	132	128	62	37	228	198	151	30	48	171	21	131	39	127	73	84	150	74	170	55	29	77	50	56	14	96	139	83 ]
   [ 97	112	119	65	84	98	173	86	114	20	98	115	0	118	55	33	65	114	165	110	101	106	67	44	122	133	166	93	159	89	71	87	96	136	110	41	116	129	82	121	86	93	109	90	98	136	120	19	152	104 ]
   [ 26	84	70	73	150	139	201	54	132	143	182	22	118	0	70	109	115	29	238	52	119	63	132	128	74	26	240	202	137	35	55	171	33	144	24	138	86	96	161	86	171	68	15	78	62	42	15	97	152	95 ]
   [ 49	81	88	24	109	97	174	38	90	80	119	69	55	70	0	46	71	70	195	77	75	74	69	65	90	88	197	139	160	45	27	109	56	113	65	87	84	99	118	89	108	61	64	56	66	92	77	34	126	72 ]
   [ 87	124	131	67	115	130	144	76	133	57	75	108	33	109	46	0	97	106	197	122	119	118	40	18	134	125	199	126	131	81	63	64	92	156	102	74	128	143	115	133	63	106	101	59	110	128	114	32	170	116 ]
   [ 88	81	107	56	38	36	237	91	50	51	161	103	65	115	71	97	0	99	125	96	62	93	130	106	97	129	126	95	207	79	69	149	82	73	106	30	89	90	47	88	148	80	105	113	85	132	106	71	89	78 ]
   [ 28	58	44	55	136	124	199	51	112	133	179	16	114	29	70	106	99	0	224	26	87	37	129	125	49	45	225	195	155	26	45	168	18	118	43	124	60	70	147	60	167	42	32	74	36	60	22	93	126	69 ]
   [ 212	198	231	180	90	128	335	215	147	141	240	227	165	238	195	197	125	224	0	221	183	218	233	209	217	254	24	75	323	204	194	252	207	172	231	144	209	210	84	208	251	205	229	237	210	257	231	174	145	197 ]
   [ 45	35	21	59	133	115	216	68	88	130	194	40	110	52	77	122	96	26	221	0	64	14	149	145	26	68	222	192	175	46	65	188	38	94	62	121	37	47	144	37	187	42	52	94	15	80	45	92	103	46 ]
   [ 92	26	53	60	95	61	241	95	35	96	191	101	101	119	75	119	62	87	183	64	0	52	142	139	44	132	184	154	211	83	73	182	86	40	110	88	36	37	110	35	181	45	109	117	60	136	109	91	54	25 ]
   [ 56	29	16	56	130	103	227	79	77	127	191	51	106	63	74	118	93	37	218	14	52	0	142	138	19	78	220	190	185	56	72	181	48	82	73	119	30	41	142	31	180	21	62	105	20	90	56	90	96	24 ]
   [ 111	147	154	90	150	163	105	76	156	92	74	132	67	132	69	40	130	129	233	149	142	142	0	34	157	148	232	159	92	105	86	64	116	179	125	107	150	166	149	156	58	128	124	51	133	98	137	81	192	139 ]
   [ 107	143	150	87	126	141	124	96	153	68	62	128	44	128	65	18	106	125	209	145	139	138	34	0	154	145	210	137	123	101	82	51	112	176	122	85	147	163	126	153	51	125	120	82	130	148	134	52	189	136 ]
   [ 68	15	10	72	129	95	239	91	69	131	206	62	122	74	90	134	97	49	217	26	44	19	157	154	0	90	221	191	197	68	89	197	60	77	84	126	16	26	147	16	197	37	74	116	34	102	67	107	81	27 ]
   [ 41	99	86	85	166	155	174	69	148	163	197	37	133	26	88	125	129	45	254	68	132	78	148	145	90	0	253	223	110	55	73	186	46	156	26	152	99	109	175	99	185	80	30	76	75	26	24	112	164	108 ]
   [ 214	200	233	182	91	130	336	217	149	142	241	228	166	240	197	199	126	225	24	222	184	220	232	210	221	253	0	76	325	206	195	253	208	173	232	145	210	211	85	209	252	206	231	239	211	258	232	175	162	199 ]
   [ 184	169	202	152	60	99	263	170	119	69	161	198	93	202	139	126	95	195	75	192	154	190	159	137	191	223	76	0	254	174	155	171	177	142	194	81	178	179	46	178	181	175	193	193	180	221	201	105	157	167 ]
   [ 139	206	192	158	241	232	64	125	225	183	162	151	159	137	160	131	207	155	323	175	211	185	92	123	197	110	325	254	0	146	147	151	150	250	118	199	207	218	240	207	142	200	128	101	184	101	133	173	264	210 ]
   [ 9	77	64	36	116	105	174	26	97	113	154	30	89	35	45	81	79	26	204	46	83	56	105	101	68	55	206	174	146	0	26	143	12	123	28	105	79	89	128	79	142	65	27	49	55	54	35	68	144	76 ]
   [ 34	78	85	20	106	94	174	29	87	96	135	48	71	55	27	63	69	45	194	65	73	72	86	82	89	73	195	155	147	26	0	125	29	112	47	94	82	98	117	88	124	60	46	50	65	74	53	51	125	71 ]
   [ 150	186	193	130	169	184	137	139	196	111	9	171	87	171	109	64	149	168	252	188	182	181	64	51	197	186	253	171	151	143	125	0	154	218	163	127	189	204	168	194	16	167	162	124	172	190	175	94	231	178 ]
   [ 12	69	56	38	119	107	185	37	100	116	165	21	96	33	56	92	82	18	207	38	86	48	116	112	60	46	208	177	150	12	29	154	0	125	33	107	71	81	131	71	153	67	22	60	47	50	27	79	137	78 ]
   [ 130	56	83	98	84	53	278	133	24	121	228	131	136	144	113	156	73	118	172	94	40	82	179	176	77	156	173	142	250	123	112	218	125	0	149	103	73	73	99	71	219	82	147	155	97	175	143	130	18	62 ]
   [ 18	94	80	65	143	131	181	46	124	135	174	39	110	24	65	102	106	43	231	62	110	73	125	122	84	26	232	194	118	28	47	163	33	149	0	139	95	105	162	95	171	76	15	70	71	21	37	97	160	104 ]
   [ 112	105	131	80	49	64	211	115	78	27	137	127	41	138	87	74	30	124	144	121	88	119	107	85	126	152	145	81	199	105	94	127	107	103	139	0	115	116	50	114	127	106	130	138	110	157	132	50	118	104 ]
   [ 79	8	22	66	121	87	249	104	61	123	200	73	116	86	84	128	89	60	209	37	36	30	150	147	16	99	210	178	207	79	82	189	71	73	95	115	0	18	136	5	190	30	85	126	45	113	78	99	73	18 ]
   [ 90	23	32	81	122	88	264	113	62	124	215	84	129	96	99	143	90	70	210	47	37	41	166	163	26	109	211	179	218	89	98	204	81	73	105	116	18	0	138	14	205	45	95	137	55	123	88	115	71	30 ]
   [ 135	126	154	81	14	55	253	138	75	62	179	150	82	161	118	115	47	147	84	144	110	142	149	126	147	175	85	46	240	128	117	168	131	99	162	50	136	138	0	137	169	129	153	161	133	180	155	92	116	125 ]
   [ 79	13	22	71	120	86	254	102	60	122	205	74	121	86	89	133	88	60	208	37	35	31	156	153	16	99	209	178	207	79	88	194	71	71	95	114	5	14	137	0	195	35	84	127	44	112	78	105	70	23 ]
   [ 149	186	193	129	168	183	115	138	195	111	32	170	86	171	108	63	148	167	251	187	181	180	58	51	197	185	252	181	142	142	124	16	153	219	171	127	190	205	169	195	0	168	163	109	172	190	176	94	232	178 ]
   [ 72	26	33	44	117	96	227	82	70	114	178	55	93	68	61	106	80	42	205	42	45	21	128	125	37	80	206	175	200	65	60	167	67	82	76	106	30	45	129	35	168	0	67	104	24	95	61	78	84	16 ]
   [ 17	83	70	64	141	130	192	45	123	134	173	29	109	15	64	101	105	32	229	52	109	62	124	120	74	30	231	193	128	27	46	162	22	147	15	130	85	95	153	84	163	67	0	69	62	33	26	88	151	95 ]
   [ 56	121	112	63	149	138	129	30	131	133	135	77	90	78	56	59	113	74	237	94	117	105	51	82	116	76	239	193	101	49	50	124	60	155	70	138	126	137	161	127	109	104	69	0	104	49	83	88	169	116 ]
   [ 56	43	30	48	122	110	227	78	85	119	183	50	98	62	66	110	85	36	210	15	60	20	133	130	34	75	211	180	184	55	65	172	47	97	71	110	45	55	133	44	172	24	62	104	0	83	48	77	98	30 ]
   [ 44	111	97	91	169	157	164	72	150	161	200	56	136	42	92	128	132	60	257	80	136	90	98	148	102	26	258	221	101	54	74	190	50	175	21	157	113	123	180	112	190	95	33	49	83	0	53	114	176	120 ]
   [ 32	76	63	62	143	132	206	58	125	140	186	14	120	15	77	114	106	22	231	45	109	56	137	134	67	24	232	201	133	35	53	175	27	143	37	132	78	88	155	78	176	61	26	83	48	53	0	102	144	88 ]
   [ 76	95	103	48	91	106	185	65	105	45	105	96	19	97	34	32	71	93	174	92	91	90	81	52	107	112	175	105	173	68	51	94	79	130	97	50	99	115	92	105	94	78	88	88	77	114	102	0	143	89 ]
   [ 145	63	87	112	100	69	291	146	40	137	242	139	152	152	126	170	89	126	145	103	54	96	192	189	81	164	162	157	264	144	125	231	137	18	160	118	73	71	116	70	232	84	151	169	98	176	144	143	0	1 ]
   [ 83	8	34	54	110	76	238	92	50	112	189	83	104	95	72	116	78	69	197	46	25	24	139	136	27	108	199	167	210	76	71	178	78	62	104	104	18	30	125	23	178	16	95	116	30	120	88	89	1	0 ]
   ]
  )

(defn get-distance [[a b]] (get-in distances [a b]))

(defn fitness-tsm [ind]
  "Returns the total distance travelled for a given solution"
  (let [path (pathify ind)
        distances (map get-distance path)]
    (- (reduce + distances))))
